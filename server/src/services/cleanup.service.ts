import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, LessThan } from 'typeorm';
import { Comment } from '../entities/comment.entity';

@Injectable()
export class CleanupService {
  private readonly logger = new Logger(CleanupService.name);
  private cleanupStats = {
    totalCleaned: 0,
    lastCleanup: null,
    errors: 0,
    lastCleanupTime: null,
  };

  constructor(
    @InjectRepository(Comment)
    private commentsRepository: Repository<Comment>,
  ) {}

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  @Cron(CronExpression.EVERY_5_MINUTES)
  async cleanupOldComments() {
    const startTime = Date.now();
    
    try {
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
      
      const result = await this.commentsRepository.delete({
        created_at: LessThan(fiveMinutesAgo),
      });

      const duration = Date.now() - startTime;
      const cleanedCount = result.affected || 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.cleanupStats.totalCleaned += cleanedCount;
      this.cleanupStats.lastCleanup = new Date();
      this.cleanupStats.lastCleanupTime = duration;

      this.logger.log(
        `üßπ Cleanup completed: ${cleanedCount} comments removed in ${duration}ms`
      );

      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      console.log(`üìä Cleanup Stats: ${JSON.stringify(this.cleanupStats, null, 2)}`);
      
      // –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∏–ª–∏ –º–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (cleanedCount > 100) {
        this.logger.warn(`‚ö†Ô∏è Large cleanup: ${cleanedCount} comments removed`);
      }
      
    } catch (error) {
      this.cleanupStats.errors++;
      this.logger.error('‚ùå Cleanup failed:', error);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      console.error('Cleanup Error Details:', {
        timestamp: new Date().toISOString(),
        error: error.message,
        stack: error.stack,
        stats: this.cleanupStats,
      });
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ 0 —Å–µ–∫—É–Ω–¥)
  @Cron('0 */5 * * * *')
  async cleanupCommentsAtSpecificTime() {
    this.logger.log('üïê Scheduled cleanup triggered at specific time');
    await this.cleanupOldComments();
  }

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async manualCleanup() {
    this.logger.log('üîß Manual cleanup triggered');
    return this.cleanupOldComments();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏
  getCleanupStats() {
    return {
      ...this.cleanupStats,
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
    };
  }

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  resetStats() {
    this.cleanupStats = {
      totalCleaned: 0,
      lastCleanup: null,
      errors: 0,
      lastCleanupTime: null,
    };
    this.logger.log('üîÑ Cleanup stats reset');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
  async healthCheck() {
    try {
      const count = await this.commentsRepository.count();
      return {
        status: 'healthy',
        totalComments: count,
        lastCleanup: this.cleanupStats.lastCleanup,
        totalCleaned: this.cleanupStats.totalCleaned,
        errors: this.cleanupStats.errors,
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        timestamp: new Date().toISOString(),
      };
    }
  }
}
