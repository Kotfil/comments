import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Comment } from '../entities/comment.entity';
import { CreateCommentDto, CreateReplyDto } from '../dto/create-comment.dto';

@Injectable()
export class CommentsService {
  constructor(
    @InjectRepository(Comment)
    private commentsRepository: Repository<Comment>,
  ) {}

  async findAll(): Promise<Comment[]> {
    // –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (parent_id = null)
    // –∏ –∏—Ö –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ relations
    return this.commentsRepository
      .createQueryBuilder('comment')
      .leftJoinAndSelect('comment.replies', 'replies')
      .leftJoinAndSelect('replies.replies', 'replies2')
      .where('comment.parent_id IS NULL')
      .orderBy('comment.created_at', 'DESC')
      .addOrderBy('replies.created_at', 'ASC')
      .addOrderBy('replies2.created_at', 'ASC')
      .getMany();
  }

  async findById(id: string): Promise<Comment> {
    const comment = await this.commentsRepository
      .createQueryBuilder('comment')
      .leftJoinAndSelect('comment.replies', 'replies')
      .leftJoinAndSelect('replies.replies', 'replies2')
      .where('comment.id = :id', { id })
      .getOne();

    if (!comment) {
      throw new NotFoundException(`Comment with ID ${id} not found`);
    }

    return comment;
  }

  async findByHomepage(homepage: string): Promise<Comment> {
    const comment = await this.commentsRepository
      .createQueryBuilder('comment')
      .leftJoinAndSelect('comment.replies', 'replies')
      .leftJoinAndSelect('replies.replies', 'replies2')
      .where('comment.homepage = :homepage', { homepage })
      .getOne();

    if (!comment) {
      throw new NotFoundException(`Comment with homepage ${homepage} not found`);
    }

    return comment;
  }

  async create(createCommentDto: CreateCommentDto): Promise<Comment> {
    const comment = this.commentsRepository.create({
      ...createCommentDto,
      level: 0,
      avatar: 'üë§',
    });

    const savedComment = await this.commentsRepository.save(comment);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
    return this.findById(savedComment.id);
  }

  async createReply(createReplyDto: CreateReplyDto): Promise<Comment> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const parentComment = await this.findById(createReplyDto.parentId);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const replyLevel = parentComment.level + 1;
    
    const reply = this.commentsRepository.create({
      ...createReplyDto,
      parent_id: createReplyDto.parentId,
      level: replyLevel,
      avatar: 'üë§',
    });

    const savedReply = await this.commentsRepository.save(reply);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
    return this.findById(savedReply.id);
  }



  async delete(id: string): Promise<void> {
    const comment = await this.findById(id);
    await this.commentsRepository.remove(comment);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  async seedDatabase(): Promise<void> {
    const existingComments = await this.commentsRepository.count();
    
    if (existingComments === 0) {
      const sampleComments = [
        {
          author: 'John Doe',
          email: 'john@example.com',
          homepage: 'johndoe',
          content: '–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! –û—á–µ–Ω—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.',
          avatar: 'üë®‚Äçüíª',
          level: 0,
        },
        {
          author: 'Jane Smith',
          email: 'jane@example.com',
          homepage: 'janesmith',
          content: '–°–æ–≥–ª–∞—Å–Ω–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –î–æ–±–∞–≤–ª—é –æ—Ç —Å–µ–±—è: –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!',
          avatar: 'üë©‚Äçüé®',
          level: 0,
        },
        {
          author: 'Bob Johnson',
          email: 'bob@example.com',
          content: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è. –•–æ—Ç–µ–ª–æ—Å—å –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.',
          avatar: 'üë®‚Äçüî¨',
          level: 0,
        },
      ];

      for (const commentData of sampleComments) {
        await this.create(commentData);
      }

      console.log('Database seeded with sample data');
    }
  }

  // –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ SQL
  async searchComments(query: string, filters?: any): Promise<any[]> {
    const qb = this.commentsRepository.createQueryBuilder('comment');
    
    if (query) {
      qb.where('comment.content ILIKE :query OR comment.author ILIKE :query', {
        query: `%${query}%`
      });
    }
    
    return qb.orderBy('comment.created_at', 'DESC').getMany();
  }

  async searchByContent(content: string): Promise<any[]> {
    return this.commentsRepository
      .createQueryBuilder('comment')
      .where('comment.content ILIKE :content', { content: `%${content}%` })
      .orderBy('comment.created_at', 'DESC')
      .getMany();
  }

  async searchByAuthor(author: string): Promise<any[]> {
    return this.commentsRepository
      .createQueryBuilder('comment')
      .where('comment.author ILIKE :author', { author: `%${author}%` })
      .orderBy('comment.created_at', 'DESC')
      .getMany();
  }

  async searchByHomepage(homepage: string): Promise<any[]> {
    return this.commentsRepository
      .createQueryBuilder('comment')
      .where('comment.homepage ILIKE :homepage', { homepage: `%${homepage}%` })
      .orderBy('comment.created_at', 'DESC')
      .getMany();
  }

  async getSuggestions(query: string): Promise<string[]> {
    const authors = await this.commentsRepository
      .createQueryBuilder('comment')
      .select('DISTINCT comment.author', 'author')
      .where('comment.author ILIKE :query', { query: `%${query}%` })
      .limit(5)
      .getRawMany();
    
    return authors.map(a => a.author);
  }
}
