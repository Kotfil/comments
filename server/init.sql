-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
-- CREATE DATABASE comments_db;

-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
\c comments_db;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è UUID
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
CREATE TABLE IF NOT EXISTS comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    author VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL,
    homepage VARCHAR(255),
    avatar VARCHAR(10) DEFAULT 'üë§',
    content TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    likes INTEGER DEFAULT 0,
    dislikes INTEGER DEFAULT 0,
    level INTEGER DEFAULT 0,
    parent_id UUID,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    CONSTRAINT fk_parent_comment 
        FOREIGN KEY (parent_id) 
        REFERENCES comments(id) 
        ON DELETE CASCADE,
    
    CONSTRAINT check_content_length 
        CHECK (char_length(content) >= 10),
    
    CONSTRAINT check_author_length 
        CHECK (char_length(author) >= 2),
    
    CONSTRAINT check_email_format 
        CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id);
CREATE INDEX IF NOT EXISTS idx_comments_homepage ON comments(homepage);
CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at);
CREATE INDEX IF NOT EXISTS idx_comments_level ON comments(level);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_comments_updated_at 
    BEFORE UPDATE ON comments 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
INSERT INTO comments (author, email, homepage, content, avatar, level) VALUES
('John Doe', 'john@example.com', 'johndoe', '–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! –û—á–µ–Ω—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.', 'üë®‚Äçüíª', 0),
('Jane Smith', 'jane@example.com', 'janesmith', '–°–æ–≥–ª–∞—Å–Ω–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –î–æ–±–∞–≤–ª—é –æ—Ç —Å–µ–±—è: –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö!', 'üë©‚Äçüé®', 0),
('Bob Johnson', 'bob@example.com', NULL, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è. –•–æ—Ç–µ–ª–æ—Å—å –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.', 'üë®‚Äçüî¨', 0)
ON CONFLICT DO NOTHING;

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
CREATE OR REPLACE VIEW main_comments AS
SELECT 
    c.*,
    COUNT(r.id) as replies_count
FROM comments c
LEFT JOIN comments r ON c.id = r.parent_id
WHERE c.parent_id IS NULL
GROUP BY c.id
ORDER BY c.created_at DESC;

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
CREATE OR REPLACE VIEW comments_with_replies AS
SELECT 
    c.*,
    r.id as reply_id,
    r.author as reply_author,
    r.content as reply_content,
    r.created_at as reply_created_at
FROM comments c
LEFT JOIN comments r ON c.id = r.parent_id
WHERE c.parent_id IS NULL
ORDER BY c.created_at DESC, r.created_at ASC;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ homepage
CREATE OR REPLACE FUNCTION get_comment_by_homepage(p_homepage VARCHAR)
RETURNS TABLE (
    id UUID,
    author VARCHAR,
    email VARCHAR,
    homepage VARCHAR,
    avatar VARCHAR,
    content TEXT,
    timestamp TIMESTAMP,
    likes INTEGER,
    dislikes INTEGER,
    level INTEGER,
    created_at TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.id,
        c.author,
        c.email,
        c.homepage,
        c.avatar,
        c.content,
        c.timestamp,
        c.likes,
        c.dislikes,
        c.level,
        c.created_at
    FROM comments c
    WHERE c.homepage = p_homepage;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
CREATE OR REPLACE FUNCTION get_comments_hierarchy()
RETURNS TABLE (
    id UUID,
    author VARCHAR,
    content TEXT,
    level INTEGER,
    parent_id UUID,
    created_at TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    WITH RECURSIVE comment_tree AS (
        -- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        SELECT 
            c.id,
            c.author,
            c.content,
            c.level,
            c.parent_id,
            c.created_at,
            0 as depth
        FROM comments c
        WHERE c.parent_id IS NULL
        
        UNION ALL
        
        -- –û—Ç–≤–µ—Ç—ã
        SELECT 
            r.id,
            r.author,
            r.content,
            r.level,
            r.parent_id,
            r.created_at,
            ct.depth + 1
        FROM comments r
        INNER JOIN comment_tree ct ON r.parent_id = ct.id
        WHERE ct.depth < 3 -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    )
    SELECT 
        ct.id,
        ct.author,
        ct.content,
        ct.level,
        ct.parent_id,
        ct.created_at
    FROM comment_tree ct
    ORDER BY ct.created_at DESC, ct.depth ASC;
END;
$$ LANGUAGE plpgsql;

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
-- CREATE USER comments_app WITH PASSWORD 'app_password';
-- GRANT CONNECT ON DATABASE comments_db TO comments_app;
-- GRANT USAGE ON SCHEMA public TO comments_app;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO comments_app;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO comments_app;

-- –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
SELECT 'Database initialized successfully!' as status;
