import React, { useState, useMemo, useCallback, useDeferredValue } from 'react';
import { Comment } from '@/data/mock-comments';
import { mockComments } from '@/data/mock-comments';
import { CommentsLayout } from '@/components/templates/comments-layout';
import { CommentCard } from '@/components/organisms/comment-card';
import { CommentModal } from '@/components/templates/comment-modal';
import { CommentFormData } from '@/components/organisms/comment-form';
import { PaginationComponent } from '@/components/molecules/pagination';
import { HierarchicalCommentsPageProps } from './hierarchical-comments-page.types';

export const HierarchicalCommentsPage: React.FC<HierarchicalCommentsPageProps> = ({ 
  onAddComment 
}) => {
  const [comments, setComments] = useState<Comment[]>(mockComments);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [replyToComment, setReplyToComment] = useState<Comment | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const commentsPerPage = 25;

  // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  const deferredComments = useDeferredValue(comments);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
  const totalPages = useMemo(() => {
    return Math.ceil(deferredComments.length / commentsPerPage);
  }, [deferredComments.length]);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentComments = useMemo(() => {
    const startIndex = (currentPage - 1) * commentsPerPage;
    const endIndex = startIndex + commentsPerPage;
    return deferredComments.slice(startIndex, endIndex);
  }, [deferredComments, currentPage, commentsPerPage]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageChange = useCallback((event: React.ChangeEvent<unknown>, page: number) => {
    setCurrentPage(page);
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleAddComment = useCallback((commentData: CommentFormData) => {
    const newComment: Comment = {
      id: Date.now().toString(),
      author: commentData.author,
      email: commentData.email,
      homepage: commentData.homepage,
      avatar: 'üë§',
      content: commentData.content,
      timestamp: new Date().toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      }),
      likes: 0,
      dislikes: 0,
      level: replyToComment ? replyToComment.level + 1 : 0,
      replies: [],
    };

    if (replyToComment) {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
      const addReplyToComment = (commentList: Comment[]): Comment[] => {
        return commentList.map(comment => {
          if (comment.id === replyToComment.id) {
            return {
              ...comment,
              replies: [...comment.replies, newComment],
            };
          }
          if (comment.replies.length > 0) {
            return {
              ...comment,
              replies: addReplyToComment(comment.replies),
            };
          }
          return comment;
        });
      };

      setComments(addReplyToComment(comments));
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      setComments([newComment, ...comments]);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      setCurrentPage(1);
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (onAddComment) {
      onAddComment(commentData);
    }

    setReplyToComment(null);
    setIsModalOpen(false);
  }, [replyToComment, comments, onAddComment]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç—É
  const handleReplyClick = useCallback((comment: Comment) => {
    setReplyToComment(comment);
    setIsModalOpen(true);
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleAddMainComment = useCallback(() => {
    setReplyToComment(null);
    setIsModalOpen(true);
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
  const handleAction = useCallback((action: string, comment: Comment) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    console.log(`Action: ${action} on comment:`, comment);
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞
  const handleCloseModal = useCallback(() => {
    setIsModalOpen(false);
    setReplyToComment(null);
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const paginationInfo = useMemo(() => ({
    currentCount: currentComments.length,
    totalCount: deferredComments.length,
    currentPage,
    totalPages
  }), [currentComments.length, deferredComments.length, currentPage, totalPages]);

  return (
    <CommentsLayout
      title="–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
      onAddComment={handleAddMainComment}
    >
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */}
      <div style={{ 
        textAlign: 'center', 
        marginBottom: '20px', 
        color: '#666',
        fontSize: '14px'
      }}>
        –ü–æ–∫–∞–∑–∞–Ω–æ {paginationInfo.currentCount} –∏–∑ {paginationInfo.totalCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ 
        (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {paginationInfo.currentPage} –∏–∑ {paginationInfo.totalPages})
      </div>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {totalPages > 1 && (
        <PaginationComponent
          count={totalPages}
          page={currentPage}
          onChange={handlePageChange}
        />
      )}

      {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      {currentComments.map((comment) => (
        <CommentCard
          key={comment.id}
          comment={comment}
          onReply={handleReplyClick}
          onAction={handleAction}
        />
      ))}
      
      <CommentModal
        open={isModalOpen}
        onClose={handleCloseModal}
        onSubmit={handleAddComment}
        replyToComment={replyToComment ? {
          author: replyToComment.author,
          content: replyToComment.content,
        } : null}
      />
    </CommentsLayout>
  );
};

export type { HierarchicalCommentsPageProps };
